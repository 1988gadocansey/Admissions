// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineApplicationSystem.Infrastructure.Persistence;

#nullable disable

namespace OnlineApplicationSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230418074422_InitialCreates")]
    partial class InitialCreates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicantModelProgrammeModel", b =>
                {
                    b.Property<int>("ApplicantId")
                        .HasColumnType("integer");

                    b.Property<int>("ProgrammesId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicantId", "ProgrammesId");

                    b.HasIndex("ProgrammesId");

                    b.ToTable("ApplicantModelProgrammeModel");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("boolean");

                    b.Property<string>("Use")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.AcademicExperienceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantModelID")
                        .HasColumnType("integer");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InstitutionAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ProgrammeStudied")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("To")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantModelID");

                    b.ToTable("AcademicExperienceModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicantModel")
                        .HasColumnType("integer");

                    b.Property<string>("Box")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GPRS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ApplicantIssueModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AcademicExperience")
                        .HasColumnType("boolean");

                    b.Property<bool>("Age")
                        .HasColumnType("boolean");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Biodata")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("DocumentUpload")
                        .HasColumnType("boolean");

                    b.Property<bool>("FormCompletion")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Picture")
                        .HasColumnType("boolean");

                    b.Property<bool>("Qualification")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Referee")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ResearchInformation")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ResearchPublication")
                        .HasColumnType("boolean");

                    b.Property<bool>("Results")
                        .HasColumnType("boolean");

                    b.Property<bool?>("WorkingExperience")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ApplicantIssueModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ApplicantModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdmissionType")
                        .HasColumnType("text")
                        .HasColumnName("AdmissionType");

                    b.Property<bool?>("Admitted")
                        .HasColumnType("boolean");

                    b.Property<int?>("AdmittedBy")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AltPhone")
                        .HasColumnType("text")
                        .HasColumnName("AltPhone");

                    b.Property<long>("ApplicationNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("ApplicationNumber");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<bool?>("Awaiting")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateAdmitted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Denomination")
                        .HasColumnType("text");

                    b.Property<bool?>("Disability")
                        .HasColumnType("boolean");

                    b.Property<int?>("DisabilityType")
                        .HasColumnType("integer");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<bool?>("Elligible")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EmergencyContact");

                    b.Property<string>("EntryMode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EntryMode");

                    b.Property<string>("ExternalHostel")
                        .HasColumnType("text");

                    b.Property<bool?>("FeePaying")
                        .HasColumnType("boolean");

                    b.Property<int?>("FirstChoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstQualification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstQualification");

                    b.Property<string>("FormerSchool")
                        .HasColumnType("text");

                    b.Property<int?>("FormerSchoolNewId")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("GuardianName")
                        .HasColumnType("text");

                    b.Property<string>("GuardianOccupation")
                        .HasColumnType("text");

                    b.Property<string>("GuardianPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("GuardianPhone");

                    b.Property<string>("GuardianRelationship")
                        .HasColumnType("text");

                    b.Property<int?>("HallAdmitted")
                        .HasColumnType("integer");

                    b.Property<int?>("HallId")
                        .HasColumnType("integer");

                    b.Property<string>("Hometown")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("LastYearInSchool")
                        .HasColumnType("integer");

                    b.Property<bool?>("LetterPrinted")
                        .HasColumnType("boolean");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text")
                        .HasColumnName("MaritalStatus");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<int?>("NoOfChildren")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Phone");

                    b.Property<string>("PostGPRS")
                        .HasColumnType("text");

                    b.Property<string>("PreferedHall")
                        .HasColumnType("text");

                    b.Property<int?>("ProgrammeAdmittedId")
                        .HasColumnType("integer");

                    b.Property<string>("ProgrammeStudied")
                        .HasColumnType("text");

                    b.Property<string>("Referrals")
                        .HasColumnType("text");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Reported")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReportedInSchool")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ResidentialStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Results")
                        .HasColumnType("text");

                    b.Property<string>("RoomNo")
                        .HasColumnType("text");

                    b.Property<bool?>("SMSSent")
                        .HasColumnType("boolean");

                    b.Property<int?>("SecondChoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("SecondQualification")
                        .HasColumnType("text")
                        .HasColumnName("SecondQualification");

                    b.Property<string>("SectionAdmitted")
                        .HasColumnType("text");

                    b.Property<string>("SourceOfFinance")
                        .HasColumnType("text");

                    b.Property<bool?>("SponsorShip")
                        .HasColumnType("boolean");

                    b.Property<string>("SponsorShipCompany")
                        .HasColumnType("text");

                    b.Property<string>("SponsorShipCompanyContact")
                        .HasColumnType("text");

                    b.Property<string>("SponsorShipLocation")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Applicant")
                        .HasColumnName("Status");

                    b.Property<int?>("ThirdChoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Title");

                    b.Property<string>("YearOfAdmission")
                        .HasColumnType("text");

                    b.Property<string>("leveladmitted")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FormerSchoolNewId");

                    b.HasIndex("HallId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ReligionId");

                    b.ToTable("ApplicantModel", (string)null);
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.BankModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BankModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ConfigurationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdmissionsOfficer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FeesDeadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Matriculation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("MedicalEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("MedicalStarts")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrientationEnds")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrientationStarts")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Reporting")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.CountryModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CountryModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.DenominationModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("DenominationModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.DepartmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Faculty")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DepartmentModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.DisabilitiesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicantModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantModelId");

                    b.ToTable("DisabilitiesModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.DistrictModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("DistrictModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.DocumentUploadModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Applicant")
                        .HasColumnType("integer");

                    b.Property<int?>("ApplicantModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantModelId");

                    b.ToTable("DocumentUploadModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ExamModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CutOffPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExamModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.FacultyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FacultyModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.FormNoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormNoModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.FormerSchoolModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FormerSchoolModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.GradeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Exam")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GradeModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.HallModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankAcc")
                        .HasColumnType("integer");

                    b.Property<double>("Fees")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HallModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.LanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantModelID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantModelID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ProgrammeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Department")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("LevelAdmitted")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Runing")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowOnPortal")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProgrammeModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.RefereeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<int>("refereeStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantModelId");

                    b.ToTable("RefereeModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.RegionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RegionModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ReligionModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReligionModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.RequirementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<int>("Department")
                        .HasColumnType("integer");

                    b.Property<string>("RuleOne")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuleThree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuleTwo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RequirementModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ResearchModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualAreaOfResearch")
                        .HasColumnType("text");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("integer");

                    b.Property<string>("AreaOfResearchIfAdmitted")
                        .HasColumnType("text");

                    b.Property<string>("FutureResearchInterest")
                        .HasColumnType("text");

                    b.Property<string>("Month")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("ResearchModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ResearchPublicationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("integer");

                    b.Property<string>("Publication")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("ResearchPublicationModel");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ResultUploadModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantModelID")
                        .HasColumnType("integer");

                    b.Property<string>("Center")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Form")
                        .HasColumnType("integer");

                    b.Property<int>("GradeID")
                        .HasColumnType("integer");

                    b.Property<int?>("GradeOld")
                        .HasColumnType("integer");

                    b.Property<string>("GradeValueOld")
                        .HasColumnType("text");

                    b.Property<string>("IndexNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("text");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldSubject")
                        .HasColumnType("text");

                    b.Property<string>("Sitting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubjectID")
                        .HasColumnType("integer");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantModelID");

                    b.HasIndex("GradeID");

                    b.HasIndex("SubjectID");

                    b.ToTable("ResultUploadModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.SHSAttendedModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Applicant")
                        .HasColumnType("integer");

                    b.Property<bool>("AttendedTTU")
                        .HasColumnType("boolean");

                    b.Property<string>("EndYear")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("NameId")
                        .HasColumnType("integer");

                    b.Property<string>("StartYear")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Applicant");

                    b.HasIndex("LocationId");

                    b.HasIndex("NameId");

                    b.ToTable("SHSAttendedModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.SHSProgrammes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("SHSProgrammes");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.SMSModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantModelID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Recipient")
                        .HasColumnType("integer");

                    b.Property<string>("SentBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantModelID");

                    b.ToTable("SMSModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.SchoolModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SchoolModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.SubjectModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ListId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.UniversityAttendedModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Applicant")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CGPA")
                        .HasColumnType("numeric");

                    b.Property<string>("DegreeClassification")
                        .HasColumnType("text");

                    b.Property<string>("DegreeObtained")
                        .HasColumnType("text");

                    b.Property<string>("EndYear")
                        .HasColumnType("text");

                    b.Property<int?>("LocationID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("StartYear")
                        .HasColumnType("text");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Applicant");

                    b.HasIndex("LocationID");

                    b.ToTable("UniversityAttendedModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.WorkingExperienceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicantModelId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyFrom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantModelId");

                    b.ToTable("WorkingExperienceModels");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Admitted")
                        .HasColumnType("boolean");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Finalized")
                        .HasColumnType("integer");

                    b.Property<bool?>("Foriegn")
                        .HasColumnType("boolean");

                    b.Property<int>("FormCompleted")
                        .HasColumnType("integer");

                    b.Property<string>("FormNo")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("PictureUploaded")
                        .HasColumnType("integer");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ResultUploaded")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Sold")
                        .HasColumnType("integer");

                    b.Property<string>("SoldBy")
                        .HasColumnType("text");

                    b.Property<int>("Started")
                        .HasColumnType("integer");

                    b.Property<string>("Teller")
                        .HasColumnType("text");

                    b.Property<string>("TellerPhone")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ApplicantModelProgrammeModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", null)
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ProgrammeModel", null)
                        .WithMany()
                        .HasForeignKey("ProgrammesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineApplicationSystem.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.AcademicExperienceModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", "ApplicantModel")
                        .WithMany("AcademicExperiences")
                        .HasForeignKey("ApplicantModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantModel");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.Address", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", "Applicant")
                        .WithMany("Addresses")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ApplicantModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.DistrictModel", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.FormerSchoolModel", "FormerSchoolNew")
                        .WithMany()
                        .HasForeignKey("FormerSchoolNewId");

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.HallModel", "Hall")
                        .WithMany()
                        .HasForeignKey("HallId");

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.CountryModel", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.RegionModel", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ReligionModel", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.OwnsOne("OnlineApplicationSystem.Domain.ValueObjects.ApplicantName", "ApplicantName", b1 =>
                        {
                            b1.Property<int>("ApplicantModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");

                            b1.Property<string>("Othernames")
                                .HasColumnType("text")
                                .HasColumnName("Othernames");

                            b1.HasKey("ApplicantModelId");

                            b1.ToTable("ApplicantModel");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantModelId");
                        });

                    b.OwnsOne("OnlineApplicationSystem.Domain.ValueObjects.Money", "FeesPaid", b1 =>
                        {
                            b1.Property<int>("ApplicantModelId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("FeesPaid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FeesPaidCurrency");

                            b1.HasKey("ApplicantModelId");

                            b1.ToTable("ApplicantModel");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantModelId");
                        });

                    b.OwnsOne("OnlineApplicationSystem.Domain.ValueObjects.Money", "HallFeesPaid", b1 =>
                        {
                            b1.Property<int>("ApplicantModelId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("HallFeesPaid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("HallFeesPaidCurrency");

                            b1.HasKey("ApplicantModelId");

                            b1.ToTable("ApplicantModel");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantModelId");
                        });

                    b.OwnsOne("OnlineApplicationSystem.Domain.ValueObjects.ApplicantName", "PreviousName", b1 =>
                        {
                            b1.Property<int>("ApplicantModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PreviousFirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PreviousLastName");

                            b1.Property<string>("Othernames")
                                .HasColumnType("text")
                                .HasColumnName("PreviousOthernames");

                            b1.HasKey("ApplicantModelId");

                            b1.ToTable("ApplicantModel");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantModelId");
                        });

                    b.OwnsOne("OnlineApplicationSystem.Domain.ValueObjects.IDCard", "Idcard", b1 =>
                        {
                            b1.Property<int>("ApplicantModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("NationalIDNo")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("NationalIDNo");

                            b1.Property<string>("NationalIDType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("NationalIDType");

                            b1.HasKey("ApplicantModelId");

                            b1.ToTable("ApplicantModel");

                            b1.WithOwner()
                                .HasForeignKey("ApplicantModelId");
                        });

                    b.Navigation("ApplicantName")
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("FeesPaid");

                    b.Navigation("FormerSchoolNew");

                    b.Navigation("Hall");

                    b.Navigation("HallFeesPaid");

                    b.Navigation("Idcard");

                    b.Navigation("Nationality");

                    b.Navigation("PreviousName");

                    b.Navigation("Region");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.DisabilitiesModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", null)
                        .WithMany("Disabilities")
                        .HasForeignKey("ApplicantModelId");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.DocumentUploadModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", null)
                        .WithMany("Documents")
                        .HasForeignKey("ApplicantModelId");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.LanguageModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", null)
                        .WithMany("Languages")
                        .HasForeignKey("ApplicantModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.RefereeModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", "ApplicantModel")
                        .WithMany("Referees")
                        .HasForeignKey("ApplicantModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantModel");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ResearchModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", "Applicant")
                        .WithMany("ResearchModels")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ResearchPublicationModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", "Applicant")
                        .WithMany("ResearchPublications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ResultUploadModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", "ApplicantModel")
                        .WithMany("ResultUploads")
                        .HasForeignKey("ApplicantModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.GradeModel", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.SubjectModel", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantModel");

                    b.Navigation("Grade");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.SHSAttendedModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", "ApplicantModel")
                        .WithMany("SHSAttend")
                        .HasForeignKey("Applicant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.RegionModel", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.FormerSchoolModel", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.Navigation("ApplicantModel");

                    b.Navigation("Location");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.SMSModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", null)
                        .WithMany("Sms")
                        .HasForeignKey("ApplicantModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.TodoList", b =>
                {
                    b.OwnsOne("OnlineApplicationSystem.Domain.ValueObjects.Colour", "Colour", b1 =>
                        {
                            b1.Property<int>("TodoListId")
                                .HasColumnType("integer");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TodoListId");

                            b1.ToTable("TodoLists");

                            b1.WithOwner()
                                .HasForeignKey("TodoListId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.UniversityAttendedModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", "ApplicantModel")
                        .WithMany("UniversityAttended")
                        .HasForeignKey("Applicant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineApplicationSystem.Domain.Entities.CountryModel", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.Navigation("ApplicantModel");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.WorkingExperienceModel", b =>
                {
                    b.HasOne("OnlineApplicationSystem.Domain.Entities.ApplicantModel", "ApplicantModel")
                        .WithMany("WorkingExperiences")
                        .HasForeignKey("ApplicantModelId");

                    b.Navigation("ApplicantModel");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.ApplicantModel", b =>
                {
                    b.Navigation("AcademicExperiences");

                    b.Navigation("Addresses");

                    b.Navigation("Disabilities");

                    b.Navigation("Documents");

                    b.Navigation("Languages");

                    b.Navigation("Referees");

                    b.Navigation("ResearchModels");

                    b.Navigation("ResearchPublications");

                    b.Navigation("ResultUploads");

                    b.Navigation("SHSAttend");

                    b.Navigation("Sms");

                    b.Navigation("UniversityAttended");

                    b.Navigation("WorkingExperiences");
                });

            modelBuilder.Entity("OnlineApplicationSystem.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
